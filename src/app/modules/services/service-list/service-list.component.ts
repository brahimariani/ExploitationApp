import {ChangeDetectorRef, Component, OnInit} from '@angular/core';
import {MatTableDataSource} from "@angular/material/table";
import {Group} from "../../../models/group";
import {GroupService} from "../../../services/group.service";
import {MatDialog} from "@angular/material/dialog";
import {GroupCreateComponent} from "../../groups/group-create/group-create.component";
import {GroupUpdateComponent} from "../../groups/group-update/group-update.component";
import {ServiceService} from "../../../services/service.service";
import {ServiceCreateComponent} from "../service-create/service-create.component";
import {ServiceUpdateComponent} from "../service-update/service-update.component";
import {Service} from "../../../models/service";

@Component({
  selector: 'app-service-list',
  templateUrl: './service-list.component.html',
  styleUrl: './service-list.component.css'
})
export class ServiceListComponent implements OnInit{
  keyWord: string = '';
  displayedColumns: string[] = ['name','updatedAt' , 'actions'];
  dataSource = new MatTableDataSource<Service>();
  noResults: boolean = false;  // Flag to show/hide 'No results found' message
  constructor(private service: ServiceService,private dialog: MatDialog) {}
  ngOnInit(): void {
    this.load()
  }
  load(): void {
    this.service.getAll().subscribe(
      (data) => {
        this.dataSource.data = data;
        this.dataSource.filter="";},
      (error) => console.error('Failed to load services', error)
    );
  }

  search(): void {
    const filterValue = this.keyWord.trim().toLowerCase();

    if (filterValue === '') {
      this.load(); // Load all groups if search input is empty
      console.log(1)
    } else {
      console.log(2)
      // Define filter predicate
      this.dataSource.filterPredicate = (data: Service, filter: string) => {
        const normalizedFilter = filter.toLowerCase();
        return this.matchesFilter(data, normalizedFilter);
      };

      // Apply filter
      this.dataSource.filter = filterValue;

      // Check if there are any results after filtering
      this.noResults = this.dataSource.filteredData.length === 0;
    }
  }

// Helper method to match filter criteria
  private matchesFilter(data: Service, filter: string): boolean {
    const nameMatches = data.name ? data.name.toLowerCase().includes(filter) : false;
    return nameMatches;
  }

  add(): void {
    const dialogRef = this.dialog.open(ServiceCreateComponent, {});

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  edit(item: Service): void {
    const dialogRef = this.dialog.open(ServiceUpdateComponent, {
      data: item
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  delete(item: Service): void {
    if (confirm(`est vous sÃ»r de supprimer : ${item.name}?`)) {
      this.service.delete(item.id).subscribe(
        () => this.load(),
        (error) => alert(error.error)
      );
    }
  }
}
