import {ChangeDetectorRef, Component, OnInit} from '@angular/core';
import {MatTableDataSource} from "@angular/material/table";
import {Service} from "../../../models/service";
import {ServiceService} from "../../../services/service.service";
import {MatDialog} from "@angular/material/dialog";
import {Group} from "../../../models/group";
import {ServiceCreateComponent} from "../../services/service-create/service-create.component";
import {ServiceUpdateComponent} from "../../services/service-update/service-update.component";
import {UserService} from "../../../services/user.service";
import {User} from "../../../models/user";
import {UserCreateComponent} from "../user-create/user-create.component";
import {UserUpdateComponent} from "../user-update/user-update.component";

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrl: './user-list.component.css'
})
export class UserListComponent implements OnInit{
  keyWord: string = '';
  displayedColumns: string[] = ['name','mail','service','accounteState','updatedAt' , 'actions'];
  dataSource = new MatTableDataSource<Service>();
  noResults: boolean = false;  // Flag to show/hide 'No results found' message
  constructor(private service: UserService,private srv:ServiceService, private dialog: MatDialog) {}
  ngOnInit(): void {
    this.load()
  }
  load(): void {
    this.service.getAll().subscribe(
      (data) => {
        data.map((u:User)=>{
          this.srv.getById(u.serviceId).subscribe((s)=> {
              u.service = s;
            }
          );
        })

        this.dataSource.data = data;
        this.dataSource.filter="";},
      (error) => console.error('Failed to load users', error)
    );
  }

  search(): void {
    const filterValue = this.keyWord.trim().toLowerCase();

    if (filterValue === '') {
      this.load(); // Load all groups if search input is empty
      console.log(1)
    } else {
      console.log(2)
      // Define filter predicate
      this.dataSource.filterPredicate = (data: User, filter: string) => {
        const normalizedFilter = filter.toLowerCase();
        return this.matchesFilter(data, normalizedFilter);
      };

      // Apply filter
      this.dataSource.filter = filterValue;

      // Check if there are any results after filtering
      this.noResults = this.dataSource.filteredData.length === 0;
    }
  }

// Helper method to match filter criteria
  private matchesFilter(data: User, filter: string): boolean {
    const nameMatches = data.name ? data.name.toLowerCase().includes(filter) : false;
    const mailMatches = data.mail ? data.mail.toLowerCase().includes(filter) : false;
    return nameMatches || mailMatches;
  }

  add(): void {
    const dialogRef = this.dialog.open(UserCreateComponent, {});

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  edit(item: User): void {
    const dialogRef = this.dialog.open(UserUpdateComponent, {
      data: item
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  delete(item: User): void {
    if (confirm(`est vous sÃ»r de supprimer : ${item.name}?`)) {
      this.service.delete(item.id).subscribe(
        () => this.load(),
        (error) => alert(error.error)
      );
    }
  }
}
