import {Component, OnInit} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {Service} from "../../../models/service";
import {ServiceService} from "../../../services/service.service";
import {UserService} from "../../../services/user.service";
import {MatDialogRef} from "@angular/material/dialog";
import {User} from "../../../models/user";
import {ProcedureService} from "../../../services/procedure.service";
import {GroupService} from "../../../services/group.service";
import {Procedure} from "../../../models/procedure";
import {Group} from "../../../models/group";

@Component({
  selector: 'app-procedure-create',
  templateUrl: './procedure-create.component.html',
  styleUrl: './procedure-create.component.css'
})
export class ProcedureCreateComponent implements OnInit{
  form: FormGroup;
  groups:Group[]=[]
  constructor(
    private fb: FormBuilder,
    private groupsService: GroupService,
    private procedureService:ProcedureService,
    private dialogRef: MatDialogRef<ProcedureCreateComponent>
  ) {
    this.form = this.fb.group({
      title: ['', Validators.required],
      description: ['', Validators.required],
      groupId:['', Validators.required]
    });
  }

  onSubmit(): void {
    if (this.form.valid) {
      const item: Procedure = this.form.value;
      this.procedureService.create(item).subscribe({
        next: (result) => {
          this.dialogRef.close(result);
        },
        error: (err) => console.error('Failed to create user', err)
      });
    }
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  ngOnInit(): void {
    this.groupsService.getAll().subscribe(
      (data) => {
        this.groups = data},
      (error) => console.error('Failed to load groups', error)
    );
  }
}
