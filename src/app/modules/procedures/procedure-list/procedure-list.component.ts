import {Component, Injectable, OnInit, ViewChild} from '@angular/core';
import {Procedure} from "../../../models/procedure";
import {ProcedureService} from "../../../services/procedure.service";
import {MatSidenav} from "@angular/material/sidenav";
import {MatDialog} from "@angular/material/dialog";
import {StepCreateComponent} from "../../steps/step-create/step-create.component";
import {MatTableDataSource} from "@angular/material/table";
import {Group} from "../../../models/group";
import {GroupCreateComponent} from "../../groups/group-create/group-create.component";
import {GroupUpdateComponent} from "../../groups/group-update/group-update.component";
import {ProcedureCreateComponent} from "../procedure-create/procedure-create.component";
import {ProcedureUpdateComponent} from "../procedure-update/procedure-update.component";


@Component({
  selector: 'app-procedure-list',
  templateUrl: './procedure-list.component.html',
  styleUrl: './procedure-list.component.css'
})
export class ProcedureListComponent implements OnInit{
  keyWord: string = '';
  displayedColumns: string[] = ['title', 'description','updatedAt', 'actions'];
  dataSource = new MatTableDataSource<Procedure>();
  noResults: boolean = false;  // Flag to show/hide 'No results found' message
  selectedProcedure: Procedure|undefined;
  @ViewChild('sidenav') sidenav?: MatSidenav;
  constructor(private service:ProcedureService,private dialog:MatDialog) {
  }

  ngOnInit(): void {
    this.load()
  }
  load():void{
    this.service.getAll().subscribe((data) => {
      this.dataSource.data = data;
      this.dataSource.filter="";
    });
  }

  selectProcedure(procedure: Procedure | null) {
    if (procedure) {
      this.service.getById(procedure?.id).subscribe(
        data => {
          this.selectedProcedure = data;
        }
      );
      if (this.selectedProcedure && this.sidenav)
        this.sidenav.open();
    }
  }

  openAddStepDialog(procedure: Procedure | null) {
    if (procedure) {
      const dialogRef = this.dialog.open(StepCreateComponent, {
        width: '400px',
        data: procedure
      });
      dialogRef.afterClosed().subscribe(() => {
        this.selectProcedure(procedure); // Reload steps after dialog closes
      });
    }
  }

  search(): void {
    const filterValue = this.keyWord.trim().toLowerCase();

    if (filterValue === '') {
      this.load(); // Load all groups if search input is empty
      console.log(1)
    } else {
      console.log(2)
      // Define filter predicate
      this.dataSource.filterPredicate = (data: Procedure, filter: string) => {
        const normalizedFilter = filter.toLowerCase();
        return this.matchesFilter(data, normalizedFilter);
      };

      // Apply filter
      this.dataSource.filter = filterValue;

      // Check if there are any results after filtering
      this.noResults = this.dataSource.filteredData.length === 0;
    }
  }

// Helper method to match filter criteria
  private matchesFilter(data: Procedure, filter: string): boolean {
    const titleMatches = data.title ? data.title.toLowerCase().includes(filter) : false;
    const descriptionMatches = data.description ? data.description.toLowerCase().includes(filter) : false;
    return titleMatches || descriptionMatches;
  }

  add(): void {
    const dialogRef = this.dialog.open(ProcedureCreateComponent, {});
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  edit(item: Procedure): void {
    const dialogRef = this.dialog.open(ProcedureUpdateComponent, {
      data: item
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.load();
      }
    });
  }

  delete(item: Procedure): void {
    if (confirm(`est vous sÃ»r de supprimer : ${item.title}?`)) {
      this.service.delete(item.id).subscribe(
        () => this.load(),
        (error) => alert(error.error)
      );
    }
  }

}
