import {Component, Inject, OnInit} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {MAT_DIALOG_DATA, MatDialogRef} from "@angular/material/dialog";
import {User} from "../../../models/user";
import {Step} from "../../../models/step";
import {StepResourceService} from "../../../services/step-resource.service";

@Component({
  selector: 'app-step-resource-create',
  templateUrl: './step-resource-create.component.html',
  styleUrl: './step-resource-create.component.css'
})
export class StepResourceCreateComponent implements OnInit{
  resourceForm: FormGroup;
  selectedFile: File | null = null;

  constructor(private fb: FormBuilder,
              private dialogRef: MatDialogRef<StepResourceCreateComponent>,
              @Inject(MAT_DIALOG_DATA) public data: Step,
              private service:StepResourceService) {
    this.resourceForm = this.fb.group({
      type: [null, Validators.required],
      content: [''], // Initially empty, will be required conditionally
      path: [''] // For file uploads
    });
  }

  ngOnInit(): void {
    this.resourceForm.get('type')!.valueChanges.subscribe((type)=>{
      this.updateFormValidators(type);
    });
  }

  get isTextOrCommand(): boolean {
    const type = this.resourceForm.get('type')?.value;
    return type === 1 || type === 2;
  }

  get isImageOrFile(): boolean {
    const type = this.resourceForm.get('type')?.value;
    return type === 3 || type === 4;
  }

  onTypeChange(type: number): void {
    this.updateFormValidators(type);
  }
  updateFormValidators(type: number): void {
    if (type === 1 || type === 2) {
      this.resourceForm.get('content')?.setValidators([Validators.required]);
      this.resourceForm.get('path')?.clearValidators();
    } else if (type === 3 || type === 4) {
      this.resourceForm.get('path')?.setValidators([Validators.required]);
      this.resourceForm.get('content')?.clearValidators();
    }
    this.resourceForm.get('content')?.updateValueAndValidity();
    this.resourceForm.get('path')?.updateValueAndValidity();
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if ( input.files && input.files.length > 0) {
      this.selectedFile = input?.files[0];
      this.resourceForm.patchValue({
        path: this.selectedFile.name
      });
    }
  }

  onSubmit(): void {
    if (this.resourceForm.valid) {

      if (this.isTextOrCommand){
        this.resourceForm.value.stepId=this.data.id;
        this.resourceForm.value.position=this.data.resources?.length;
        console.log(this.resourceForm)
        this.service.create(this.resourceForm.value).subscribe(()=>
          this.dialogRef.close()
        )
      }
      if ( this.isImageOrFile && this.selectedFile) {
        this.service.uploadFile(this.selectedFile).subscribe({
          next: (response) => {
            this.resourceForm.value.stepId=this.data.id;
            this.resourceForm.value.position=this.data.resources?.length;
            this.resourceForm.value.path=response.filePath;
            console.log(this.resourceForm)
            this.service.create(this.resourceForm.value).subscribe(()=>
              this.dialogRef.close()
            )
          },
          error: (error) => {
            console.error('File upload failed:', error);
            // Handle upload error
          }
        });
      }
    }
  }

  onCancel(): void {
    this.dialogRef.close();
  }
}
