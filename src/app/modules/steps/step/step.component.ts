import {Component, Input, numberAttribute, OnChanges, OnInit, SimpleChanges} from '@angular/core';
import {Step} from "../../../models/step";
import {FormBuilder} from "@angular/forms";
import {StepService} from "../../../services/step.service";
import {MatDialog} from "@angular/material/dialog";
import {Procedure} from "../../../models/procedure";
import {StepResourceCreateComponent} from "../../step-resources/step-resource-create/step-resource-create.component";
import {StepUpdateComponent} from "../step-update/step-update.component";
import {ProcedureService} from "../../../services/procedure.service";

@Component({
  selector: 'app-step',
  templateUrl: './step.component.html',
  styleUrl: './step.component.css'
})
export class StepComponent implements OnInit,OnChanges{
  @Input() procedureId?: number; // Input property to receive the procedure ID
  steps: Step[] |undefined= []; // List of steps to display

  constructor(
    private fb: FormBuilder,
    private stepService: StepService,
    private procedureService:ProcedureService,
    public dialog: MatDialog
  ) {}

  ngOnInit(): void {
    this.loadSteps();

  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['procedureId'] && this.procedureId) {
      this.loadSteps();
    }
  }
  loadSteps(): void {
    if (this.procedureId) {
      this.procedureService.getById(this.procedureId).subscribe((data: Procedure) => {
        this.steps = data.steps;
        if (this.steps) {
          this.steps = this.steps.sort((a, b) => (a.position || 0) - (b.position || 0));
        }
      });
    }

  }

  openAddResourceDialog(step: Step): void {
    const dialogRef = this.dialog.open(StepResourceCreateComponent, {
      width: '400px',
      data: step
    });
    dialogRef.afterClosed().subscribe(() => {
      this.loadSteps(); // Reload steps after dialog closes
    });
  }

  openUpdateDialog(step: Step): void {
    const dialogRef = this.dialog.open(StepUpdateComponent, {
      width: '400px',
      data:  step
    });
    dialogRef.afterClosed().subscribe(() => {
      this.loadSteps(); // Reload steps after dialog closes
    });
  }

  deleteStep(step: Step): void {
    this.stepService.delete(step.id!).subscribe(() => {
      this.loadSteps(); // Reload steps after deletion
    });
  }

  moveStep(step: Step, direction: 'up' | 'down'): void {
    let targetStep: Step | undefined;

    if (direction === 'up') {
      // Find the step with the position just above the current step
      if (this.steps) {
        targetStep = this.steps.find(s => s.position === step.position! - 1);
      }
      if (targetStep) {
        targetStep.position += 1;
        step.position -= 1;
      }
    } else if (direction === 'down') {
      // Find the step with the position just below the current step
      if (this.steps) {
        targetStep = this.steps.find(s => s.position === step.position! + 1);
      }
      if (targetStep) {
        targetStep.position -= 1;
        step.position += 1;
      }
    } else {
      return;
    }

    if (step && targetStep) {
      // Update both steps' positions in the backend
      this.stepService.update(targetStep.id!, targetStep).subscribe(() => {
        this.stepService.update(step.id!, step).subscribe(() => {
          this.loadSteps();
        });
      });
    }
  }




}
