import {Component, OnInit} from '@angular/core';
import {Group} from "../../../models/group";
import {GroupService} from "../../../services/group.service";
import {MatTableDataSource} from "@angular/material/table";
import {MatDialog} from "@angular/material/dialog";
import {GroupCreateComponent} from "../group-create/group-create.component";
import {GroupUpdateComponent} from "../group-update/group-update.component";

@Component({
  selector: 'app-group-list',
  templateUrl: './group-list.component.html',
  styleUrl: './group-list.component.css'
})
export class GroupListComponent implements OnInit{
  keyWord: string = '';
  displayedColumns: string[] = ['name', 'description', 'actions'];
  dataSource = new MatTableDataSource<Group>();
  noResults: boolean = false;  // Flag to show/hide 'No results found' message
  constructor(private service: GroupService,private dialog: MatDialog) {}
  ngOnInit(): void {
    this.loadGroups()
  }
  loadGroups(): void {
    this.service.getAll().subscribe(
      (data) => {
        this.dataSource.data = data;
        this.dataSource.filter="";},
      (error) => console.error('Failed to load groups', error)
    );
  }

  searchGroup(): void {
    const filterValue = this.keyWord.trim().toLowerCase();

    if (filterValue === '') {
      this.loadGroups(); // Load all groups if search input is empty
      console.log(1)
    } else {
      console.log(2)
      // Define filter predicate
      this.dataSource.filterPredicate = (data: Group, filter: string) => {
        const normalizedFilter = filter.toLowerCase();
        return this.matchesFilter(data, normalizedFilter);
      };

      // Apply filter
      this.dataSource.filter = filterValue;

      // Check if there are any results after filtering
      this.noResults = this.dataSource.filteredData.length === 0;
    }
  }

// Helper method to match filter criteria
  private matchesFilter(data: Group, filter: string): boolean {
    const nameMatches = data.name ? data.name.toLowerCase().includes(filter) : false;
    const descriptionMatches = data.description ? data.description.toLowerCase().includes(filter) : false;
    return nameMatches || descriptionMatches;
  }

  addGroup(): void {
    const dialogRef = this.dialog.open(GroupCreateComponent, {});

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.loadGroups();
      }
    });
  }

  editGroup(group: Group): void {
    const dialogRef = this.dialog.open(GroupUpdateComponent, {
      data: group
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.loadGroups();
      }
    });
  }

  deleteGroup(group: Group): void {
    if (confirm(`Are you sure you want to delete the group ${group.name}?`)) {
      this.service.delete(group.id).subscribe(
        () => this.loadGroups(),
        (error) => alert(error.error)
      );
    }
  }

}
