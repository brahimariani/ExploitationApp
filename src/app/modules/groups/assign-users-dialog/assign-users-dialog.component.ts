import {Component, Inject, OnInit} from '@angular/core';
import {User} from "../../../models/user";
import {FormArray, FormBuilder, FormGroup} from "@angular/forms";
import {MAT_DIALOG_DATA, MatDialogRef} from "@angular/material/dialog";
import {UserService} from "../../../services/user.service";
import {GroupService} from "../../../services/group.service";
import {Group} from "../../../models/group";

@Component({
  selector: 'app-assign-users-dialog',
  templateUrl: './assign-users-dialog.component.html',
  styleUrl: './assign-users-dialog.component.css'
})
export class AssignUsersDialogComponent implements OnInit{
  users: User[] = [];
  groupForm: FormGroup;

  constructor(
    private dialogRef: MatDialogRef<AssignUsersDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: Group,
    private userService: UserService,
    private groupService: GroupService,
    private fb: FormBuilder
  ) {
    this.groupForm = this.fb.group({
      selectedUsers: this.fb.array([]) // Initialize as FormArray
    });
  }

  ngOnInit(): void {
    // Fetch the list of users
    this.userService.getAll().subscribe(users => {
      this.users = users;
      this.setInitialSelection(); // Set initial selection based on data
    });
  }

  get selectedUsers(): FormArray {
    return this.groupForm.get('selectedUsers') as FormArray;
  }

  setInitialSelection(): void {
    const selectedUserIds = this.data.users!.map(user => user.id);
    selectedUserIds.forEach(userId => {
      if (!this.selectedUsers.value.includes(userId)) {
        this.selectedUsers.push(this.fb.control(userId));
      }
    });
  }

  onUserToggle(user: User): void {
    const index = this.selectedUsers.controls.findIndex(control => control.value === user.id);
    if (index === -1) {
      if (user.id != null) {
        this.selectedUsers.push(this.fb.control(user.id));
      }
    } else {
      this.selectedUsers.removeAt(index);
    }
  }

  isSelected(userId: User): boolean {
    return this.selectedUsers.value.includes(userId.id);
  }

  onSave(): void {
    // Call the API to assign users to the group
    const userIds = this.selectedUsers.value;
    this.groupService.assignUsersToGroup(this.data.id, userIds).subscribe(response => {
      this.dialogRef.close(true);
    });
  }

  onCancel(): void {
    this.dialogRef.close(false);
  }
}
